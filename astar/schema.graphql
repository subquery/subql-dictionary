type SpecVersion @entity {
  id: ID! #specVersion
  blockHeight: BigInt!
}

type Event @entity {
  id: ID!
  module: String! @index
  event: String! @index
  blockHeight: BigInt! @index
}

type Extrinsic @entity {
  id: ID!
  module: String! @index
  call: String! @index
  blockHeight: BigInt! @index
  success: Boolean!
  isSigned: Boolean!
}

type EvmTransaction @entity {
  id: ID!
  txHash: String!
  """
  A lowercase address of the sender
  """
  from: String! @index
  """
  A lowercase address. This will be null for contract creations
  """
  to: String @index
  """
  A lowercased function sighash extracted from the data field
  """
  func: String @index
  blockHeight: BigInt! @index
  success: Boolean!
}

type EvmLog @entity {
  id: ID!
  """
  The contract address that emitted the event. Lowercased
  """
  address: String! @index
  blockHeight: BigInt! @index
  """
  The lowercase event signature
  """
  topics0: String! @index
  """
  The lowercase first indexed argument
  """
  topics1: String
  """
  The lowercase second indexed argument
  """
  topics2: String
  """
  The lowercase third indexed argument
  """
  topics3: String
}

type ContractsCall @entity {
  id: ID!
  from: String! @index
  dest: String! @index #contract address
  selector: String! @index
  blockHeight: BigInt! @index
  success: Boolean!
}

type ContractEmitted @entity {
  id: ID!
  contract: String! @index
  from: String! @index
  eventIndex: Int! @index
  blockHeight: BigInt! @index
}
